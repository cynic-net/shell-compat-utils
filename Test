#!/usr/bin/env bash
set -Eeuo pipefail

PROJDIR=$(cd "$(dirname "$0")" && pwd -P)

die()       { local ec="$1"; shift; echo 1>&2 "$@"; exit "$ec"; }
test_dep()  { "$@" >/dev/null 2>&1; }

deps_debian() {
    local deps=()

    #   general
    test_dep cc --version           || deps+=(build-essential)
    test_dep make --version         || deps+=(make)

    #   bash 3
    test_dep autoconf --version     || deps+=(autoconf)
    test_dep yacc --version         || deps+=(bison)

    [[ ${#deps[@]} -eq 0 ]] && return 0     # no installs necessary

    echo '===== Installing missing system build dependnecies:'
    echo "      ${deps[@]}"
    sudo apt-get install "${deps[@]}"
}

submodule_setup() {
    local module_paths=$(sed -n -e 's/path = //p' .gitmodules)
    local path init=false
    for path in $module_paths; do
        [[ -d $path/. ]] || init=true
    done
    $init || return 0
    git submodule update --init
}

build_bash3() {
    #   These committed files are changed because we force a parser rebuild
    #   (the y.tab.* committed in the repo are buggy). To avoid annoying
    #   messages from `git status` we mark them to be assumed unchanged.
    BASH3_ASSUME_UNCHANGED=( parser-built y.tab.c y.tab.h)

    #   The shipped y.tab.* are buggy; force regeneration. But only do
    #   so on "new" builds where configure hasn't been run.
    [[ -e bash3/config.h ]] || touch bash3/parse.y

    cp build-files/bash3.gitignore bash3/.gitignore
    (
        cd bash3
        [[ -e config.h ]] || ./configure
        make -j16
        git update-index --assume-unchanged "${BASH3_ASSUME_UNCHANGED[@]}"
    )
    cp bash3/bash bin/bash3

    bin/bash3 --version
    [[ $(bin/bash3 --version) == *3.2.48* ]] || die 2 "Bad bash3 version?"
}

####################################################################
#   Main

deps_debian     # XXX should support other systems?

cd "$PROJDIR"
submodule_setup
rm -rf bin/ && mkdir bin/
build_bash3
